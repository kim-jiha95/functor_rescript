// FEAT : 위키백과
// 함수 f는 다음과 같은 튜플- (셀 수 있는 수량의 순서 있는 열거) 이다.
// 튜플은 특정 조건 - ((x,y) -> Y가 유일하게 존재 )을 만족시켜야지만 함수라고 함 

// ++
// 보통 프로그래밍에서 함수란 하나의 특별한 목적의 작업을 수행하기 위해 독립적으로 설계된 프로그램 코드의 집합으로 정의함 
// 함수형 프로그래밍은 하나의 프로그래밍 패러다임으로 정의되는 일련의 코딩 접근 방식이며, 자료처리를 수학적 함수의 계산으로 취급하고 상태와 가변데이터를 멀리하는 프로그래밍 패러다임을 의미한다.

// 순수 함수는 동일한 인자를 주었을 때 항상 같은 값을 리턴해야 하고 외부 값 참조하지 않아야 함 -수학에서 사용되는 함수의 의미와 같음
// 순수 함수 내부에서 순수 함수를 호출하는 경우도 순수 함수의 조건에 위배되지 않음.

// 함수형 프로그래밍에서 중요한 2가지 개념 - 부수효과/ 참조투명성

//  expression 개선됐을때 하나의 값이 될 수 있는 것
//statement 실행가능한 코드조각
// if문 for문은 expression에 해당하지 않는 statement임  if문은 특정 값으로 치환이 안됨 삼항연산자는 expression임

//for loop는 왜 state일까?
//함수를 호풀하는 것도 expression임
//literal -> 데이터 그 자체 이미 계산이 끝난 값

// 부수 효과는 함수 내의 실행으로 인해 함수 외부가 영향을 받는 것을 의미함.
// 즉 함수형 코드가 되기 위해서는 외부 세계(데이터 베이스, 파일 시스템, 네트워크로 데이터 이동이 '함수 실행' 중에 발생하지 않아야 함

const area = radius => Math.PI * Math.pow(radius, 2);

// 참조 투명하다 -- 함수 입력 표현식을 그 결과로 치환해도 함수 작동에 문제가 없기 때문에
// 로컬 리즈닝 -> 지역적 추론  ---> 기대했을 때  효과 달라짐
console.log(area(3) + area(4));;
//  ==
console.log(Math.PI * Math.pow(3, 2) + Math.PI * Math.pow(4, 2));


// curry 와 partial application

// 커리는 하나의 인자를 받는 함수를 반환하는 함수를 반환하는 함수를 반환하는 ... 함수임 하나의 인자를 받는 함수로 표현하며 그 함수는 다른 함수를 반환하고, 반환된 함수 역시 하나의 인자를 받는다는 규칙을 따른다.

// partial application : 함수를 반환하는 함수이지만 함수가 받는 인자는 하나일 필요는 없다. 여러 개를 받을 수도 있다

const add = x => (y, z) => x + y + z;
